{
    "contents" : "#' Plots categorical data as pie charts for each region of Leipzig.\n#'\n#' User can define which labels are placed in which of the three label regions.\n#'\n#' @title Plots pie charts for each region in a map\n#' @param map polygon data of the map\n#' @param plotType \"pie\" for pie chart and \"bar\" for bar chart\n#' @param inputDf categorical data to be plotted, three columns with colnames=(\"id\", \"category\", \"num\"). \"id\": region id\n#' @param filterValue sets filter for in each region. If sum(num) of a region is smaller than filterValue, no chart is displayed\n#' @param colList color list for pie chart. Default list is inside the function\n#' @param legendText a vector of legend text for each category. Default is values in column \"category\"\n#' @param textSize textSize for legendText\n#' @param textFont font of the legendText\n#' @param pieRadius set radius for pie chart\n#' @param sizeX length of x axis for bar chart\n#' @param sizeY length of y axis for bar chart\n#' @param legendPos_lx, _ly, _rx, _ry: lower left and upper right coordinates of the color legend\n#'\n#' @return map of Leipzig with pie charts in each region\n#'\n#' @examples see \"use-cases/usecase-category_chart_bmi.r\"\n#'\n#' @export\nplot_category <- function(map=\"Ortsteil\", plotType=\"bar\", inputDf=bmiDf, filterValue = 0,\n                     colList=NULL,legendText=NULL, textSize=0.8, textFont=\"Helvetica\",\n                     legendPos_lx=12.35, legendPos_ly=51.24, legendPos_rx=12.357, legendPos_ry=51.27,\n                     pieRadius=0.0045,sizeX = 0.3, sizeY =0.3){\n  categories <- as.vector(sort(unique(inputDf$category)))\n  if (is.null(legendText)){\n    legendText <- categories\n  }\n  # empty plot as backgroup\n  if (map== \"Ortsteil\"){\n    mapDf <- ot_polygon\n    x=ot_polygon$long\n    y=ot_polygon$lat\n    labelDf <- ot_label_points\n  } else if (map == \"Stadtbezirk\"){\n    mapDf <- sbz_polygon\n    x=sbz_polygon$long\n    y=sbz_polygon$lat\n    labelDf <- sbz_label_points\n  }\n  # map data\n  map_split <- split(mapDf,mapDf$id) # id is used as names of each split\n  plot(x, y,\n       xlab=\"\",\n       ylab=\"\",\n       type=\"n\",\n       axes=F)\n\n  for(j in 1:length(map_split)){\n    lines(map_split[[j]]$long,map_split[[j]]$lat,type=\"l\",col=\"grey10\",lwd = 1)\n    map_split_id <- names(map_split)[j]\n    # if a region has no data --> next\n    if(nrow(inputDf[inputDf$id==map_split_id,])==0) {next}\n    # if a region's absolute frequency < filterValue --> next\n    if(sum(inputDf$num[inputDf$id==map_split_id]) < filterValue){next}\n    label_x <- labelDf[which(labelDf$id==map_split_id),]$best_x\n    label_y <- labelDf[which(labelDf$id==map_split_id),]$best_y\n    chart_data <- c()\n    if (is.null(colList)){\n      colListDefault=c(\"purple\",\"orange\",\"springgreen4\",\"yellow\",\"dodgerblue4\",\"red3\")\n    }\n    else{\n      colListDefault=colList\n    }\n    colList <- c()\n    diff <- c()\n    for (i in 1:length(categories)){\n      d <- inputDf$num[inputDf$id==map_split_id & inputDf$category== i ] # if no data, gives \"integer(0)\" back\n      if (length(d) == 0){\n        chart_data <- c(chart_data, 0.0001) # floating.pie[plotrix] ignores 0 and use next color, so add an value to replace 0\n      }\n      chart_data <- c(chart_data, inputDf$num[inputDf$id==map_split_id & inputDf$category== i ])\n      colList <- c(colList,colListDefault[i])\n    } # for\n    if (plotType == \"bar\"){\n      plot_bar(label_x=label_x, label_y=label_y,chart_data=chart_data,colList = colList,sizeX = sizeX , sizeY = sizeY)\n    }\n    else if (plotType == \"pie\"){\n      floating.pie(label_x,label_y,chart_data,radius = pieRadius,col=colList)\n    }\n  }\n  color.legend(legendPos_lx,legendPos_ry,legendPos_rx,legendPos_ly,legend=legendText,rect.col=colList,\n               align=\"rb\", gradient = 'y',cex=textSize,family=textFont)\n}\n\nplot_bar <- function(label_x=label_x, label_y=label_y,chart_data=chart_data,colList=colList,sizeX=sizeX,sizeY=sizeY){\n  subplot(barplot(chart_data,xaxt='n',yaxt='n',col = colList), x=label_x, y=label_y,size = c(sizeX,sizeY))\n}\n\n# backgroup is not transparent\n# plot_pie <- function(label_x=label_x, label_y=label_y,chart_data=chart_data,colList=colList,sizeX=sizeX,sizeY=sizeY){\n#   subplot(pie(chart_data,col = colList,labels = NA), x=label_x, y=label_y,size = c(sizeX,sizeY))\n# }\n",
    "created" : 1454587583971.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3069587676",
    "id" : "FD0036E1",
    "lastKnownWriteTime" : 1454588427,
    "path" : "~/lifemap/R/plot_category.r",
    "project_path" : "R/plot_category.r",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}