{
    "contents" : "## OPTIONAL: give max and min position of each group\n\n############## pull labels out of the map RIGHT ##############\nassign_right_labels <- function(right_group=NULL, label_data, right_top, right_bottom, right_left){\n  # right_group has pulled out labels on the right\n  right <- label_data[label_data$id %in% right_group,]\n  # assign each id in right group a y_axis value}\n  # right_max_y: label_data$best_y[ which(label_data$id == \"94\")]\n  right_max_y <- right_top\n  # right_min_y: label_data$best_y[ which(label_data$id == \"24\")])\n  right_min_y <- right_bottom\n  interval <- (right_max_y - right_min_y)/length(right_group)\n  right_max_y <- right_max_y + interval\n  right_y_points <- seq(right_min_y, right_max_y, length.out = length(right_group))\n  right_y_ordered <- right[with(right,order(best_y)),]\n  right_y_ordered$right_label_y <- right_y_points\n  #fixed x : label_data$best_x[label_data$id==\"29\"]\n  right_y_ordered$right_label_x <- right_left\n  right <- right_y_ordered[,c(\"id\", \"right_label_x\", \"right_label_y\")]\n  return(right)\n}\n\n############## pull labels out of the map BOTTOM ##############\nassign_bottom_labels <- function(bottom_group, label_data, bottom_top, bottom_right,bottom_left){\n  bottom <- label_data[label_data$id %in% bottom_group,]\n  # assign each id in bottom group a x_axis value\n  # label_data$best_x[ which(label_data$id == \"33\")]\n  bottom_max_x <- bottom_right\n  # label_data$best_x[ which(label_data$id == \"70\")]\n  bottom_min_x <- bottom_left\n  interval <- (bottom_max_x - bottom_min_x)/length(bottom_group)\n  bottom_max_x <- bottom_max_x + interval\n  bottom_x_points <- seq(bottom_min_x, bottom_max_x, length.out = length(bottom_group))\n  bottom_x_ordered <- bottom[with(bottom,order(best_x)),]\n  bottom_x_ordered$bottom_label_x <- bottom_x_points\n  # label_data$best_y[label_data$id==\"55\"]\n  bottom_x_ordered$bottom_label_y <- bottom_top\n  bottom <- bottom_x_ordered[,c(\"id\", \"bottom_label_x\", \"bottom_label_y\")]\n  return(bottom)\n}\n\n  ############## pull labels out of the map LEFT ##############\nassign_left_labels <- function(left_group, label_data, left_top, left_bottom, left_right){\n  left <- label_data[label_data$id %in% left_group,]\n  # assign each id in left group a y_axis value\n  # label_data$best_y[ which(label_data$id == \"75\")]\n  left_max_y <- left_top\n  # label_data$best_y[ which(label_data$id == \"54\")]\n  left_min_y <- left_bottom\n  interval <- (left_max_y - left_min_y)/length(left_group)\n  left_max_y <- left_max_y + interval\n  left_y_points <- seq(left_min_y, left_max_y, length.out = length(left_group))\n  left_y_ordered <- left[with(left,order(best_y)),]\n  left_y_ordered$left_label_y <- left_y_points\n  #fixed x\n  min_x <- left_right # min(ot_polygon$long)\n  left_y_ordered$left_label_x <- min_x - interval\n  left <- left_y_ordered[,c(\"id\", \"left_label_x\", \"left_label_y\")]\n  return(left)\n}\n\n# remove the internal labels if external label exists for the polygon\nremove_inside_label <- function(right_group=NULL, left_group=NULL, bottom_group=NULL, label_data){\n  polygons_to_remove <- c(right_group,left_group,bottom_group)\n  labels_to_remove <- data.frame(id=label_data[, c(\"id\")])\n  labels_to_remove$inside_x <- label_data$best_x\n  labels_to_remove$inside_y <- label_data$best_y\n  indx <- which(labels_to_remove$id %in% polygons_to_remove == TRUE)\n  labels_to_remove$inside_x[indx] <- NA\n  labels_to_remove$inside_y[indx] <- NA\n  return(labels_to_remove)\n}\n\n# calculate the position of the external labels in three groups\ncalculate_label_outside <- function(right_group=NULL, left_group=NULL, bottom_group=NULL, label_data,\n                                    right_top, right_bottom, right_left,\n                                    left_top,left_bottom,left_right,\n                                    bottom_top, bottom_right, bottom_left){\n  if(is.null(right_group)){\n    right_labels <-data.frame(id=label_data$id,right_label_y =NA,right_label_x=NA)\n  } else {\n    right_labels <- assign_right_labels(right_group, label_data,right_top, right_bottom , right_left)\n  }\n  if(is.null(bottom_group)){\n    bottom_labels <-data.frame(id=label_data$id,bottom_label_y =NA,bottom_label_x=NA)\n  } else {\n    bottom_labels <- assign_bottom_labels(bottom_group, label_data,bottom_top, bottom_right, bottom_left)\n  }\n  if(is.null(left_group)){\n    left_labels <-data.frame(id=label_data$id,left_label_y =NA,left_label_x=NA)\n  } else {\n    left_labels <- assign_left_labels(left_group, label_data,left_top,left_bottom,left_right)\n  }\n  group_labels <- Reduce(function(x,y)merge(x,y,all=TRUE),list(right_labels,left_labels,bottom_labels))\n  # add label_inside\n  label_inside <- remove_inside_label(right_group=right_group,left_group=left_group, bottom_group=bottom_group,label_data=label_data)\n  group_labels <-merge(group_labels,label_inside,by=\"id\",all=TRUE)\n  group_labels$best_x <- label_data$best_x\n  group_labels$best_y <- label_data$best_y\n  return(group_labels)\n}\n\n\n#' Plots map of Leipzig and places labels at the label regions outside of the map. Three label regions: right, left and bottom.\n#'\n#' User can define which labels are placed in which of the three label regions.\n#'\n#' @title Plots map and places part of the labels outside of the map (Only for map of Leipzig)\n#' @param map_data polygon data of the map\n#' @param label_text text or graphics of the labels\n#' @param pal colouring palette, as in ggplot2\n#' @param fill_data OPTIONAL: a column in map_data for filling polygons with colours (alwasys merge with map_data)\n#' @param title title of the plot\n#' @param label_data dataframe contains label best_x and best_y\n#' @param right an array of polygon ids whose labels are placed in label region right\n#' @param left an array of polygon ids whose labels are placed in label region left\n#' @param bottom an array of polygon ids whose labels are placed in label region bottom\n#' @param label_line_colour line colour for labels outside\n#' @param label_size text size of the labels\n#' @param family font of the labels\n#'\n#' @return ggplot2 map of Leipzig with labels in label regions\n#'\n#' @examples see \"use-cases/usecase-plot_lifemap.r\"\n#'\n#' @export\nplot_lifemap <- function(map_data,label_text, pal=\"Greens\", fill_data = NULL, title=NULL,\n                               label_data,right=NULL, left=NULL, bottom=NULL,label_line_colour=\"blue\",\n                               label_size=4,family=\"Helvetica\",alpha=1, inLabel_off=\"no\",\n                               margin_left=0.055,margin_right=0.02,margin_bottom=0,\n                               right_top = 51.42057, right_bottom=51.3519, right_left=12.52072,\n                               bottom_top=51.2598, bottom_right=12.43295,bottom_left=12.3366,\n                               left_top = 51.34714, left_bottom = 51.27666, left_right =12.23666,\n                               with_legend=\"yes\"){\n  # calculate_label\n  group_labels <- calculate_label_outside(right_group=right, left_group=left,bottom_group=bottom, label_data= label_data,\n                                          right_top=right_top, right_bottom=right_bottom , right_left=right_left,\n                                          left_top=left_top,left_bottom=left_bottom,left_right=left_right,\n                                          bottom_top=bottom_top, bottom_right=bottom_right, bottom_left=bottom_left)\n  group_labels <- cbind(group_labels,label_text)\n  if (inLabel_off == \"no\"){\n    inside_x <- group_labels$inside_x\n    inside_y <- group_labels$inside_y\n  } else {\n    inside_x <- NULL\n    inside_y <- NULL\n  }\n\n  # to expand margin (shrink map area for larger labels)\n  min_x <- min(map_data$long)-margin_left\n  max_x <- max(map_data$long)+margin_right\n  min_y <- min(map_data$lat)-margin_bottom\n  max_y <- max(map_data$lat)\n\n  options(warn=-1)\n  g <- plot_basic_fill(map_data=map_data,label_x=inside_x, label_y=inside_y, label_text=label_text, fill_data=fill_data, pal=pal, title=title, label_size = label_size, family=family,alpha=alpha)+\n    scale_x_continuous(limits=c(min_x,max_x))+\n    scale_y_continuous(limits=c(min_y,max_y))+\n    coord_fixed() +\n    if (with_legend==\"yes\"){\n      theme(legend.position=c(0.9,0.2))\n    }else{\n      theme(legend.position=\"none\")\n    }\n\n\n  if(!is.null(right)){\n    right <- resolve_intersection(group_labels)[[1]]\n    g <- g + geom_text(data=right, aes(x=label_x, y=label_y, label=label_text,hjust=0, vjust=0), size=label_size,family=family, na.rm = TRUE) +\n         geom_segment(data=right, aes(x = best_x, y = best_y, xend = label_x, yend = label_y) , na.rm = TRUE, size=.3, color=label_line_colour)\n    }\n\n  if(!is.null(left)){\n    left <- resolve_intersection(group_labels)[[2]]\n    g <- g + geom_text(data=left, aes(x=label_x, y=label_y, label=label_text,hjust=1, vjust=1), size=label_size,family=family, na.rm = TRUE) +\n         geom_segment(data=left, aes(x = best_x, y = best_y, xend = label_x, yend = label_y) , na.rm = TRUE, size=.3, color=label_line_colour)\n    }\n\n  if(!is.null(bottom)){\n    bottom <- resolve_intersection(group_labels)[[3]]\n    g <- g + geom_text(data=bottom, aes(x=label_x, y=label_y, label=label_text,angle=45,hjust=1, vjust=1),size=label_size,family=family, na.rm = TRUE) +\n         geom_segment(data=bottom, aes(x = best_x, y = best_y, xend = label_x, yend = label_y) , na.rm = TRUE, size=.3, color=label_line_colour)\n  }\n  options(warn=0)\n  return(g)  # rememeber to return only the graph, otherwise, all data\n}\n\n\n\n",
    "created" : 1452867502756.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "867061212",
    "id" : "F8F6B11C",
    "lastKnownWriteTime" : 1449230678,
    "path" : "~/lifemap/R/plot_lifemap.r",
    "project_path" : "R/plot_lifemap.r",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}