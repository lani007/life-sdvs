{
    "contents" : "library(DBI)\nlibrary(dplyr)\nsource(\"connection.r\")\n\nget.data <- function(query){\n  fetch(dbSendQuery(ldb,query),n=-1)}\n\nq_title_from_db <- \"select TITLE from life_shiny.mdb_derivative where object_name=ONAME\"\n\nq_hg <- \"select lpad(floor(r00004_f0004/10), 2, 0) as id, r00001_f0003 as gender, age(r00001_f0005, d00079_f0002) as age, d00079_f0005 as value\n              from D00079, r00001, r00004\n              where d00079_f0001 = r00001_f0002\n              and d00079_f0001 = r00004_f0003 \n              and d00079_f0004 = 1\"\n# bmi\n# qt <- \"select lpad(floor(r00004_f0004/10), 2, 0) as id, r00001_f0002 as sic, r00001_f0003 as gender, age(r00001_f0005, D00074_F0002) as age, D00074_F0004 as value from D00074, r00001, r00004 where D00074_F0001 = r00001_f0002 and D00074_F0001 = r00004_f0003\"\n\nqb <- \"select lpad(floor(r00004_f0004/10), 2, 0) as id, r00001_f0003 as gender, age(r00001_f0005, d00079_f0002) as age, d00079_f0005 as value\nfrom D00079, r00001, r00004\nwhere d00079_f0001 = r00001_f0002\nand d00079_f0001 = r00004_f0003\"\n\ncreate_query <- function(tableName, sic, inDate, plotValue){\n  q <- gsub(\"D00079\",tableName,qb) \n  q <- gsub(\"d00079_f0001\",sic,q)\n  q <- gsub(\"d00079_f0002\",inDate,q)\n  q <- gsub(\"d00079_f0005\",plotValue,q)\n  q <- gsub(\"\\n\",\" \",q)\n  return(q) \n}\n\nadd_data_col <- function(data){\n  data$num <- 1\n  max_age <- ceiling(max(data$age))\n  # split into age classes\n  age_class <- as.vector(cut(as.numeric(data$age), breaks=c(18,40,60,max_age),labels =c(\"(18,40]\",\"(40,60]\",\"(60,80+]\") ))\n  # age_class_name <<- as.vector(sort(unique(age_class)))\n  data$age_class <- age_class\n  # add sbz.id into data\n  sbz_labels <- ot_label[,c(1,3)]\n  data <- merge(sbz_labels,data)\n  return(data)\n}\n\ngenerate_data <- function(q=q_hg,userData=NULL){\n  if (is.null(userData)){\n    data <- get.data(q)\n    colnames(data) <- tolower(colnames(data))\n    # generate userData example\n    csvData <<-data\n    cc <- complete.cases(data)\n    data <- data[cc,]\n  }else if (is.null(q)){\n    data <- userData\n    colnames(data) <- tolower(colnames(data))\n    cc <- complete.cases(data)\n    data <- data[cc,]\n  }\n  data <- add_data_col(data)\n  return(data)\n}\n\n# generate userData example\n# x <- generate_data(q_hg)\n# write.csv(csvData,file=\"data/hg_userData.csv\",row.names = FALSE)\n# nrow(x)\n\nget_group_data <- function(data, in_gender = \"all\", in_age = \"all\", groupvars = \"id\"){\n  if(in_gender == \"all\") in_gender <- unique(data$gender[!is.na(data$gender)])\n  if(in_age == \"all\") in_age <- unique(data$age_class[!is.na(data$age_class)])\n  group <-  data %>% filter(gender %in% in_gender ,age_class %in% in_age) %>% group_by_(.dots = groupvars)\n  dplyr::summarise(group, num = sum(num), mean = mean(value), sdV = sd(value),\n                   median = median(value),  q1V = quantile(value,0.25), q3V = quantile(value,0.75)) \n}\n\n# selected_data for table and show for map\nvalue_to_show <- function(data, in_gender,in_age, in_stats, map=\"ot\",filter_value){\n  common_colnames <- c(\"Absolut frequency\", \"Mean\",\"Standard deviation\",\"Standard error\",\"95% Confidence interval\", \"Median\",\"Q1\",\"Q3\")\n  if (map == \"ot\"){\n    id <- \"id\"\n    name <- ot_label[,3:4]\n  }\n  else if (map == \"sbz\"){\n    id <- \"sbz.id\"\n    name <- sbz_label_points[,c(1,4)]\n  }\n  if (in_age == \"all\" & in_gender == \"all\"){\n    groupvars <- id\n    table_colnames <-c(\"Ortsteil ID\",\"Name\",common_colnames)\n    # for formating\n    start_col <- 3\n  }\n  else if (in_age == \"all\" & in_gender != \"all\"){\n    groupvars <- c(id,\"gender\")\n    table_colnames<-c(\"Ortsteil ID\",\"Name\",\"Gender\",common_colnames)\n    start_col <- 4\n  }\n  else if (in_gender == \"all\" & in_age != \"all\"){\n    groupvars <- c(id,\"age_class\")\n    table_colnames<-c(\"Ortsteil ID\",\"Name\",\"Age Groups\",common_colnames)\n    start_col <- 4\n  }\n  else{\n    groupvars <- c(id,\"gender\",\"age_class\")\n    table_colnames<-c(\"Ortsteil ID\",\"Name\",\"Gender\",\"Age Groups\",common_colnames)\n    start_col <- 5\n  }\n  selected_data <- get_group_data(data=data, in_gender=in_gender, in_age =in_age, groupvars = groupvars)\n  # filter data using 'num' (absolute frequency)\n  selected_data_filtered <- filter(selected_data, num > filter_value)\n  \n  # calculate 95% CI\n  selected_data <- mutate(rowwise(selected_data),se=sdV/sqrt(num), lci=mean+qt(0.025,df=num-1)*se, uci=mean+qt(0.975,df=num-1)*se) \n  selected_data <- mutate(rowwise(selected_data), ci=paste(as.character(format(lci,digits=2,nsmall = 2)),as.character(format(uci,digits=2,nsmall = 2)),sep=\"~\"))  \n  selected_data <- select(selected_data,-lci,-uci)\n  selected_data <- selected_data %>% select(-median,-q1V,-q3V, everything())\n  \n  if( nrow(selected_data_filtered)== 0 ) warning('No data to fill the plot. Check if the filter value is set too high.')\n  selected_data <- cbind(selected_data[,1:start_col-1],format(selected_data[,start_col:ncol(selected_data)],digits = 2,nsmall = 2))\n  if (map == \"sbz\"){\n    colnames(selected_data)[1] <- \"id\"\n    table_colnames[1] <- \"Stadtbezirk ID\"\n  }\n  selected_data <- merge(name, selected_data, by=\"id\")\n  \n  # label with stats value\n  colnames(selected_data)[2] <- \"name\" \n  stats_label <- select(selected_data,id,name,num,mean,sdV,median)\n  stats_label <- mutate(rowwise(stats_label), name.num=paste(name,num,sep=\": \"), name.mean=paste(name,paste(mean,sdV,sep = \"\\U00b1\"),sep=\": \"),name.median=paste(name,median,sep=\": \"))  \n  stats_label <- select(stats_label,id,name,name.num, name.mean, name.median)\n\n  # prepare fill data\n  colNum <- match(in_stats,names(selected_data_filtered))\n  show <- selected_data_filtered[,c(1,colNum)]\n  colnames(show)[1] <- \"id\"\n  \n  # fill values for ALL ids (filter function removed some rows)\n  if (map == \"ot\"){\n    empty_id <- data.frame(ot_label_points$id)\n    colnames(empty_id) <- \"id\"\n    show <- dplyr::left_join(empty_id, show, by=\"id\")\n    stats_label <- dplyr::left_join(empty_id, stats_label, by=\"id\")\n  }\n  else if (map == \"sbz\"){\n    empty_id1 <-data.frame(sbz_label_points$id)\n    colnames(empty_id1) <- \"id\"\n    empty_id <- data.frame(unique(ot_label$sbz.id))\n    colnames(empty_id) <- \"id\"\n    show <- dplyr::left_join(empty_id, show, by= \"id\")\n    stats_label <- dplyr::left_join(empty_id1, stats_label, by=\"id\")\n  }\n  colnames(selected_data) <- table_colnames\n  out <- list(selected_data, show, stats_label)\n  return(out)\n}\n\n# save bmi data\n# q_bmi_continuous <- \"select lpad(floor(r00004_f0004/10), 2, 0) as id, r00001_f0003 as gender, age(r00001_f0005, D00074_F0002) as age, D00074_F0004 as value from D00074, r00001, r00004 where D00074_F0001 = r00001_f0002 and D00074_F0001 = r00004_f0003\"\n# bmi_continuous_data <- generate_data(q_bmi_continuous)\n# head(bmi_continuous_data)\n# head(csvData)\n# write.csv(csvData,\"data/bmi_db_continuous_data.csv\",row.names=FALSE)\n# write.csv(bmi_continuous_data,\"data/bmi_continuous_data.csv\",row.names=FALSE)\n\n# save hg_data\n# hg_data <- generate_data(q_hg)\n# head(hg_data)\n# write.csv(csvData,\"data/hg_db_data.csv\",row.names=FALSE)\n# write.csv(hg_data,\"data/hg_data.csv\",row.names=FALSE)\n# head(csvData)\n\nx <- value_to_show(data=hg_data, in_gender = \"all\", in_age=\"all\", in_stats = \"mean\", map = \"ot\", filter_value = \"0\")\nx\n\n# default values for external labels\nbottom <- c(\"70\", \"04\",\"03\", \"42\", \"43\", \"33\",\"50\")\nleft<- c(\"66\",\"65\",\"62\",\"63\",\"61\",\"60\")\nright <- c(\"91\", \"12\", \"06\", \"01\", \"20\", \"21\",\"14\",\"25\")\n\n\n\n",
    "created" : 1454589829691.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2413520984",
    "id" : "B89D0664",
    "lastKnownWriteTime" : 1454595966,
    "path" : "~/lifemap_shiny/get_data_continuous.r",
    "project_path" : "get_data_continuous.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}