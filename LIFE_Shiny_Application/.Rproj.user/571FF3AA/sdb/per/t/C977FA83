{
    "contents" : "user_query <- eventReactive(input$getData | input$dataSource == \"User-defined\" ,{\n  q <- create_query(tableName = input$userDataTable, sic = input$userDataSic, inDate = input$userDataDate, plotValue = input$userDataValue)\n})\n\n# read in user csv file \nuser_data <- eventReactive(input$plotUserMap,{\n  inFile <- input$userDataUpload\n  # column 'id' has to be type character\n  userData = read.csv(inFile$datapath,colClasses=c(\"id\"=\"character\"))\n  data <- generate_data(q=NULL,userData=userData)\n  return(data)\n})\n\nget_data_source <- reactive({\n  if (input$dataSource == \"Example: hand grip\"){\n    data <- generate_data(q=q_hg)\n  }\n  else if (input$dataSource == \"User-defined\"){\n    q <- user_query()\n    data <- generate_data(q=q)\n  }\n  else if (input$dataSource == \"Upload data\"){\n    data <- user_data()\n  }\n  return(data)\n})\n\nget_fill_data <- reactive({   \n  data <- get_data_source()\n  # print(head(data))\n  if (input$gender == \"male\") {\n    sh_gender <- \"1\"\n  }\n  else if (input$gender == \"female\"){\n    sh_gender <- \"2\"\n  }\n  else if (input$gender == \"all\"){\n    sh_gender <- \"all\"\n  }\n  if (input$statistics == \"Absolute frequency\"){\n    stats <- \"num\"\n  }\n  else if (input$statistics == \"Mean\"){\n    stats <- \"mean\"\n  }\n  else if (input$statistics == \"Median\"){\n    stats <- \"median\"\n  }\n  if (input$whichmap == \"Stadtbezirk\"){\n    map <- \"sbz\"\n  }\n  else if (input$whichmap == \"Ortsteil\"){\n    map <- \"ot\"\n  }\n  if (input$standardize == FALSE){\n    x <- value_to_show(data = data, in_gender = sh_gender, in_age=input$age, in_stats = stats, map = map, filter_value = input$filter)\n  }\n  else if (input$standardize == TRUE){\n    x <- get_std_df(data=data,in_gender = sh_gender,map = map, filter_value = input$filter)\n  }\n  return(x)\n}) \n\n# fill or no fill\nset_alpha <- reactive({\n  if (input$fill == \"yes\"){\n    alpha <- 1\n  }\n  else if (input$fill == \"no\")(\n    alpha <- 0\n  )\n})\n\nset_right <- reactive({\n  if (input$whichmap ==  \"Stadtbezirk\" || input$labelPlacement == \"within each area\"){\n    right <- NULL\n  } else if ( input$whichmap == \"Ortsteil\"){\n    input$right\n  }\n})\n\nset_left <- reactive({\n  if (input$whichmap ==  \"Stadtbezirk\" || input$labelPlacement == \"within each area\"){\n    left <- NULL\n  } else if ( input$whichmap == \"Ortsteil\"){\n    input$left\n  }\n})\n\nset_bottom <- reactive({\n  if (input$whichmap ==  \"Stadtbezirk\" || input$labelPlacement == \"within each area\"){\n    bottom <- NULL\n  } else if ( input$whichmap == \"Ortsteil\"){\n    input$bottom\n  }\n})\n\nlabel_line_color <-reactive({\n  switch(input$labelLine,\n         \"darkgoldenrod4\" = \"darkgoldenrod4\",\n         \"darkmagenta\" = \"darkmagenta\",\n         \"User-defined\" = input$userLabelLine)\n})\n\ncolor_data <- reactive({\n  switch(input$color,\n         \"Greens\" = \"Greens\",\n         \"Oranges\" = \"Oranges\",\n         \"User-defined\" = input$userColor )\n}) \n\nlabel_font <- reactive({\n  switch(input$font,\n         \"Bookman\" = \"Bookman\",\n         \"Helvetica\" = \"Helvetica\",\n         \"User-defined\" = input$userFont)\n})\n\n\nlabel_text <- reactive({\n  label_w_stats <- get_fill_data()[[3]]\n  switch(input$label,\n         \"id\" = label_w_stats$id,\n         \"name\" = label_w_stats$name,\n         \"name: frequency\" = label_w_stats$name.num,\n         \"name: mean\" = label_w_stats$name.mean,\n         \"name: median\" = label_w_stats$name.median)\n})\n\nget_map_data <- reactive({\n   fill_data <- get_fill_data()[[2]]\n  # fill_data <- get_fill_data()[[2]]\n  if (input$whichmap == \"Stadtbezirk\"){\n    merge(sbz_polygon,fill_data,by.x=\"id\",by.y = \"id\")\n  }else if (input$whichmap == \"Ortsteil\"){\n    merge(ot_polygon,fill_data,by.x=\"id\",by.y = \"id\")\n  }\n})\n\n# for x and y axis, default as best_x, best_y\nlabel_data <- reactive({\n  if (input$whichmap == \"Stadtbezirk\"){\n    sbz_label_points\n  }else if (input$whichmap == \"Ortsteil\"){\n    ot_label_points\n  }\n})\n\n## for title ##\nget_table_name <- reactive({\n  switch(input$dataSource,\n         \"Example: hand grip\" = \"Hand Grip Strength\",\n         \"User-defined\"= \"Body Mass Index\", # TODO: get info from VIEW\n         \"Upload data\" = \"Table_Name\"\n  )\n})\n\ntitle_text <- reactive({\n  paste0(input$statistics,\" of \",get_table_name())\n})\n\ntitle_text0 <- reactive({\n  if (input$standardize == TRUE & input$age ==\"all\"){\n      paste0(\" (gender: \",input$gender, \", age group: \", input$age,\", with age standardized)\")\n  }\n  else {\n    paste0(\" (gender: \",input$gender, \", age group: \", input$age,\")\")\n  }\n})\n\n# PLOT ....\nplotInput <- reactive({\n  map_data <- get_map_data()\n  fill_column <<- map_data[,8]\n  plot_lifemap(map_data = get_map_data(),\n               label_text = label_text() , pal = color_data(),\n               right= set_right(), left=set_left(),bottom=set_bottom(),\n               label_data = label_data(), inLabel_off = input$inLabel,\n               margin_left = input$marginLeft, margin_right = input$marginRight,\n               margin_bottom = input$marginBottom,\n               right_top = input$rightTop, right_bottom = input$rightBottom, right_left = input$rightLeft,\n               left_top = input$leftTop, left_bottom = input$leftBottom, left_right = input$LeftRight,\n               bottom_top = input$bottomTop, bottom_right = input$BottomRight, bottom_left = input$BottomLeft,\n               label_size = input$size,\n               family = label_font(), alpha = set_alpha(),\n               label_line_colour = label_line_color(),\n               with_legend = input$fill,\n               fill_data = \"fill_column\") \n} ) # plotInput\n\n# http://shiny.rstudio.com/gallery/dynamic-ui.html\noutput$title <- renderText({\n  title_text()\n})\noutput$title0 <- renderText({\n  title_text0()\n})\n\n\noutput$map <- renderPlot({\n  fill_data <- get_fill_data()[[2]]\n  if (length(which(!is.na(fill_data[,2])))==0){\n    plot.new()\n    text(0.4,0.5,\"No data to fill the areas.\\nCheck if the 'minimum absolute frequency' value is set properly.\",col=\"red\",size=7)\n  }else{\n    print(plotInput())\n  }\n}) # output$map\n\n######## show tables ########\noutput$table <- renderDataTable({\n    fill_data <- get_fill_data()[[1]]\n})\n\n######## downloads ########\noutput$downloadMap <- downloadHandler(\n  filename = function() {paste(input$dataSource,'png', sep='.')},\n  content = function(file) {\n    device <- function(..., width, height) {\n      grDevices::png(..., width = width, height = height,\n                     res = 300, units = \"in\")\n    }\n    ggsave(file, plot = plotInput(), device = device)\n  }) # downloadHandler",
    "created" : 1454589834075.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "427982015",
    "id" : "C977FA83",
    "lastKnownWriteTime" : 1454606883,
    "path" : "~/lifemap_shiny/server_continuous.r",
    "project_path" : "server_continuous.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}